#!/usr/bin/env python3
"""TBD"""
# pylint: disable=invalid-name,too-many-branches,too-many-locals
# pylint: disable=too-many-nested-blocks,import-outside-toplevel

import os
import sys
from types import SimpleNamespace
import heapq

NWORDS = 4  # number of words per word set; options may set this to 3

##############################################################################
##   human()
##############################################################################
def human(number):
    """ Return a concise number description."""
    suffixes = ['K', 'M', 'G', 'T']
    while suffixes:
        suffix = suffixes.pop(0)
        number /= 1024
        if number < 99.95 or not suffixes:
            return f'{number:.1f}{suffix}'
    return '???' # should not happen

class Scorer:
    """Class for doing scoring computations"""
    scorer = None
    letters = {} # info on each letter
    grand_uniq_cnt = 0 # grand total of unique letters in words
    max_uniq_cnt = 0
    word_cnt = 0  # of answers
    traps = {}

    def __init__(self):
        for letter in list('abcdefghijklmnopqrstuvwxyz'):
            Scorer.letters[letter] = SimpleNamespace(
                    letter=letter,
                    pos_cnts=[0, 0, 0, 0, 0],
                    pos_mults=[0, 0, 0, 0, 0],
                    pos_sum=0,
                    uniq_cnt=0
                )
        self.trap_lets = {}

    @staticmethod
    def get_singleton():
        """TBD"""
        if not Scorer.scorer:
            Scorer.scorer = Scorer()
        return Scorer.scorer

    @staticmethod
    def _to_trap(word, pos):
        return word[0:pos] + '.' + word[pos+1:]

    def _get_trap_score(self, word, left=''):
        score = 0
        for pos in range(len(word)):
            if left:
                cnt = len(BestWords.get_overlap_lets(self.trap_lets[self._to_trap(word, pos)], left))
                score = max(score, cnt)
            else:
                cnt = len(self.trap_lets[self._to_trap(word, pos)])
                if cnt > 1:
                    # score += (cnt-1) # total other words
                    score = max(score, cnt-1)
        return score

    def add_word(self, word, is_answer):
        """ Add a word to the scoring database."""
        seen = set()
        for pos, letter in enumerate(list(word)):
            if is_answer:
                ns = self.letters[letter]
                ns.pos_cnts[pos] += 1
                ns.pos_sum += 1
                if letter not in seen:
                    seen.add(letter)
                    ns.uniq_cnt += 1
                    Scorer.grand_uniq_cnt += 1
            # traps consider all words
            trap = self._to_trap(word, pos)
            if trap not in self.trap_lets:
                self.trap_lets[trap] = ''
            self.trap_lets[trap] += letter
        self.word_cnt += 1

    def freeze(self, exponent):
        """ Finish off scoring params. """
        Scorer.max_uniq_cnt = 0
        for ns in self.letters.values():
            if Scorer.max_uniq_cnt < ns.uniq_cnt:
                Scorer.max_uniq_cnt = ns.uniq_cnt
            for pos in range(5):
                mult = (ns.pos_cnts[pos] * 5) / ns.pos_sum
                # take a root to compress numbers if <1 (default=0.33)
                mult = round(mult ** exponent, 2)
                ns.pos_mults[pos] = mult

    def get_scores(self, word):
        """Get basic score of word which is how many letters
        the work reveals"""
        raw_score = 0
        adj_score = 0
        for pos, letter in enumerate(list(word)):
            ns = self.letters[letter]
            score = int(round(1000*ns.uniq_cnt/Scorer.grand_uniq_cnt))
            raw_score += score
            ### give bonus for less popular letters
            ## score *= (2*Scorer.max_uniq_cnt - ns.uniq_cnt)/Scorer.max_uniq_cnt
            # give bonus for right position
            score *= ns.pos_mults[pos]
            adj_score += score

        return int(round(adj_score)), raw_score

    def dump(self, verbose, answers):
        """Show the scoring stats"""
        print(f'{self.word_cnt} answer words; {Scorer.grand_uniq_cnt} unique letters')
        print('Showing for each letter:')
        print(' - % of all words w letter')
        print(' - % of words w letter having it in position (>100% reflects double-letters)')

        print('\nlet  pct   1  2  3  4  5  sum [position-pcts]')
        print(  '=== ====  == == == == ==  ===')

        nses = sorted(self.letters.values(), key=lambda ns: ns.uniq_cnt, reverse=True)
        for ns in nses:
            pcts = [int(round((100*cnt)/ns.uniq_cnt)) for cnt in ns.pos_cnts]
            pct_strs = [f'{pct:2d}' for pct in pcts]

            mults = [f'{mult:4.2f}' for mult in ns.pos_mults]
            mults_str = ' '.join(mults)
            out = f' {ns.letter}: {(100*ns.uniq_cnt)//Scorer.grand_uniq_cnt:3.1f}%'
            out += f'  {" ".join(pct_strs)} = {sum(pcts):3d}'
            if verbose:
                out += f' mults: {mults_str}'
            print(out)

        traps = sorted(self.trap_lets.keys(), key=lambda t: len(self.trap_lets[t]), reverse=True)
        print('\nTRAPS:')
        for row, trap in enumerate(traps):
            lets = self.trap_lets[trap]
            if len(lets) < 3:
                break
            print(f'{row:>4d}: {trap} {len(lets)} {lets}')

        print(f'short trap-score: {self._get_trap_score("short")}')
        print(f'chomp trap-score: {self._get_trap_score("chomp")}')

        words = sorted(answers, key=lambda w: self._get_trap_score(w), reverse=True)
        print('\nTRAP SCORES')
        for row, word in enumerate(words):
            score = self._get_trap_score(word)
            if score < 1:
                break
            print(f'{row:>4d}: {word} {score}')


class BestWords:
    """TBD"""
    def __init__(self):
        self.here = os.path.dirname(os.path.abspath(__file__)) # source directory
        self.opts = None
        self.answers = None
        self.guesses = None
        self.complexs = {} # keyed by vowel string
        self.added = set()


    def get_word_lists(self, opts):
        """Read the word lists"""
        self.opts = opts
        self.answers = self._get_words(os.path.join(self.here, 'answers.txt'))
        self.guesses = self._get_words(os.path.join(self.here,'legal_words.txt'))
        self.guesses.update(self.answers)

    @staticmethod
    def overlapped(a, b):
        """Returns whether there is an overlap of two words."""
        return len(set(list(a) + list(b))) != len(a) + len(b)

    @staticmethod
    def get_overlap_lets(a, b):
        """ number of overlapping letters in two words. """
        return ''.join(set(list(a)) & set(list(b)))

    @staticmethod
    def get_overlap(a, b):
        """ number of overlapping letters in two words. """
        return len(set(list(a)) & set(list(b)))

    def _get_words(self, file_path):
        """This reads a set of words in a file into a list of words
        and into a set words (either the set of answers or legal guess)
        """
        words = {}
        is_answer =  bool('answers' in file_path)
        scorer = Scorer.get_singleton()

        with open(file_path, "r", encoding='utf-8') as file:
            file_contents = file.read()
            lines = file_contents.splitlines()
            for line in lines:
                line = line.strip()
                if not line.startswith('#'):
                    wds = line.split()
                    for wd in wds:
                        words[wd] = None
                        if wd not in self.added:
                            scorer.add_word(wd, is_answer)
                            self.added.add(wd)
        if self.opts.verbose:
            print(f'#words = {len(words)} in {file_path}')
        if scorer:
            scorer.freeze(exponent=self.opts.exponent)
        return words

    def _get_germs(self, file_path):
        """This reads a set of words in a file into a list of words
        and into a set "germs" (or digests) that has the letters
        sorted and dups removed.  It also counts the number of
        letters used by all the words."""
        words = []
        germs = {}
        scorer = Scorer.get_singleton() if 'answers' in file_path else None

        with open(file_path, "r", encoding='utf-8') as file:
            file_contents = file.read()
            lines = file_contents.splitlines()
            for line in lines:
                line = line.strip()
                if not line.startswith('#'):
                    words += line.split()
        print(f'#words = {len(words)}')

        for word in words:
            if scorer:
                scorer.add_word(word)

            germ = set(list(word))
            germ = sorted(germ)
            germ = ''.join(germ)
            if germ in germs:
                germs[germ].append(word)
            else:
                germs[germ] = [word]
        print(f'#germs = {len(germs)}')
        return germs

    @staticmethod
    def store_top(results, item, limit=100):
        """ This will store the top so many items in a set of items. """
        if len(results) < limit:
            heapq.heappush(results, item)
        else:
            heapq.heappushpop(results, item)

    def get_word_sets(self, keys_str):
        """TBD"""
        def get_scores(found):
            nonlocal self, scorer, keys_str
            scores = [0]*(2*NWORDS)
            words = found.split()
            adj_score, raw_score = 0, 0
            used_letters = set()
            for idx, word in enumerate(words):
                subword = ''
                for letter in list(word):
                    if letter not in used_letters:
                        subword += letter
                        used_letters.add(letter)
                adj, raw = scorer.get_scores(subword)
                adj_score += adj
                raw_score += raw

                scores[idx] = adj_score
                scores[idx+NWORDS] = raw_score

            if NWORDS == 4:
                return (int(0.20*scores[0]
                        + 0.20*scores[1]
                        + 0.20*scores[2]
                        + 0.40*scores[3]),
                        scores, found, keys_str)
            return (int(0.30*scores[0]
                    + 0.30*scores[1]
                    + 0.40*scores[2]),
                    scores, found, keys_str)

        scorer = Scorer.get_singleton()
        keys = keys_str.split('-')
        assert len(keys) == NWORDS

        # get the lists of candidate words .. one word list
        # for each of the vowel clusters. Words must:
        #   - have all the vowels in the cluster and no more vowels
        #   - have 5 unique letters
        # If there are enough words drawing only from the answers,
        # then use those; else draw from the legal guesses.
        lists = [[]] * NWORDS
        for idx, key in enumerate(keys):
            if len(key) == 5:
                # if the word is fully specified, accept it
                lists[idx] = [key]
                continue
            # only vowels in keys allowed (if not full word)
            assert self.get_overlap(key, "aeiouy") == len(key)
            for word_dict in (self.answers, self.guesses):
                words = []
                for word in word_dict:
                    if len(set(list(word))) != 5:
                        continue
                    if self.get_overlap(key, word) != len(key):
                        continue
                    if self.get_overlap('aeiouy', word) != len(key):
                        continue
                    words.append(word)
                lists[idx] = words
                # print(f'{idx} {key} #{len(words)}')
                if len(words) >= 100:
                    break

        cnts = [len(words) for words in lists]
        loops = cnts[0]*cnts[1]*cnts[2]*(cnts[3] if NWORDS == 4 else 1)
        cnts_str = 'x'.join(str(cnt) for cnt in cnts)
        self.complexs[keys_str] = f'{cnts_str}={human(loops)}'

        rv = []
        least_overlap = 1000
        last_pct = 0
        loops = len(lists[0])
        for idx, word0 in enumerate(lists[0]):
            for word1 in lists[1]:
                if self.overlapped(word0, word1):
                    continue
                for word2 in lists[2]:
                    if NWORDS == 4:
                        if self.overlapped(word0+word1, word2):
                            continue
                        for word3 in lists[3]:
                            lap = self.get_overlap(word0+word1+word2, word3)
                            if lap > least_overlap:
                                continue
                            if lap < least_overlap:
                                if least_overlap > 2:
                                    rv = []
                                least_overlap = lap
                            found = f'{word0} {word1} {word2} {word3}'
                            scores = get_scores(found)
                            self.store_top(rv, scores)
                    if NWORDS == 3:
                        lap = self.get_overlap(word0+word1, word2)
                        if lap > least_overlap:
                            continue
                        if lap < least_overlap:
                            if least_overlap > 2:
                                rv = []
                            least_overlap = lap
                        found = f'{word0} {word1} {word2}'
                        # print('found:', found)
                        scores = get_scores(found)
                        # print('scores:', scores)
                        self.store_top(rv, scores)

            pct = int(100*idx/loops)
            if pct > last_pct:
                # print(f'{pct}%')
                last_pct = pct
        return sorted(rv)

    @staticmethod
    def get_four_whichs():
        """TBD"""
        whichs = [
                # These are the sets of vowels we try
                # - the second value is whether "priority"
                #   or a contender (for -x2)
            ('a-e-i-ouy', False), #
            ('a-e-ui-oy', False), #
            ('a-ei-oy-u', False), #
            ('a-ei-uy-o', False), # 2730
            ('a-ei-o-uy', False), #
            ('a-ue-iy-o', False), #
            ('a-ue-iy-o', False), #
            ('ae-iy-u-o', False), # 2787
            ('ae-i-oy-u', False), #
            ('ae-iu-y-o', False), #
            ('ae-io-y-u', False), #
            ('aei-o-y-u', False), #
            ('e-a-iy-ou', False), #
            ('e-ai-uy-o', False), #
            ('e-ai-oy-u', False), #
            ('ei-a-oy-u', False), #
            ('ei-a-uy-o', False), #
            ('ei-a-o-uy', False), #
            ('eo-ai-y-u', False), #
            ('iy-a-o-ue', True), # 2902
            ('iy-o-a-ue', True), # 2879
            ('o-iy-ue-a', False), #
            ('ou-ae-i-y', False), #
            ('oy-ai-u-e', True), #
            ('oy-i-a-ue', True), # 2877
            ('oe-y-i-au', False), #
            ('ue-i-a-oy', False), #
            (None, True) # None forces final results
        ]
        return whichs

    @staticmethod
    def get_three_whichs():
        """TBD"""
        triplets = set()
        def pair(first, second):
            return f'{second}{first}' if second < first else f'{first}{second}'

        for a in ('a', 'e', 'i', 'o', 'u', 'y'):
            for b in ('a', 'e', 'i', 'o', 'u', 'y'):
                for c in ('a', 'e', 'i', 'o', 'u', 'y'):
                    for d in ('a', 'e', 'i', 'o', 'u', 'y'):
                        for e in ('a', 'e', 'i', 'o', 'u', 'y'):
                            for f in ('a', 'e', 'i', 'o', 'u', 'y'):
                                if len(set([a, b, c, d, e, f])) < 6:
                                    continue
                                triplet = f'{pair(a, b)}-{pair(c, d)}-{pair(e, f)}'
                                if triplet not in triplets:
                                    triplets.add(triplet)
        whichs = []
        for triplet in sorted(triplets):
            whichs.append((triplet, True))
        whichs.append((None, True))
        return whichs

    def main(self):
        """TBD"""
        global NWORDS
        import argparse
        parser = argparse.ArgumentParser()
        parser.add_argument('-x', '--exponent', default=2.0, type=float,
                help='value to favor letter in right slot [def=2, min=0, max=4]')
        parser.add_argument('-p', '--pick', default='',
                            help='substring to match vowel sets')
        parser.add_argument('-k', '--keys', type=str, default='',
                            help="specify a-b-c-d to try")
        parser.add_argument('-e', '--every', action='store_true',
                            help='do every vowel set, not just priorities')
        parser.add_argument('-s', '--stats-only', action='store_true',
                            help='show words stats only')
        parser.add_argument('-3', '--three-words', action='store_true',
                            help='find sets-of-three (not sets-of-four)')
        parser.add_argument('-v', '--verbose', action='store_true',
                            help='show detail / debugging info')

        sys.stdout.reconfigure(line_buffering=True)

        opts = parser.parse_args()
        if opts.three_words:
            NWORDS = 3

        self.get_word_lists(opts)
        if self.opts.exponent > 2.0:
            self.opts.exponent = 2.0
        elif self.opts.exponent < 0.0:
            self.opts.exponent = 0.0

        if self.opts.keys:
            keys = self.opts.keys.split('-')
            assert len(keys) == 4
            for key in keys:
                assert len(key) > 0, (f'key ({repr(key)} of'
                      f' {repr(self.opts.keys)}) should not be empty')
        scorer = Scorer.get_singleton()

        if self.opts.verbose or self.opts.stats_only:
            scorer.dump(True, self.answers)
        if self.opts.stats_only:
            return

        whichs = self.get_four_whichs() if NWORDS == 4 else self.get_three_whichs()

        if self.opts.keys:  # optionally replace the vowel specs with one?
            whichs = [(self.opts.keys, True), (None, True)]

        # this loop prints out a summary for each of the vowel specs
        # and then the top 30 overall scores
        bests = []
        for keys, priority in whichs:
            doit = priority
            if keys is None or self.opts.every:
                doit = True
            elif self.opts.pick:
                doit = bool(self.opts.pick in keys)
            if doit:
                rvs = self.get_word_sets(keys) if keys else sorted(bests)
                complexity = self.complexs.get(keys, '')
                if len(rvs) < 1:
                    print(f'\n====== {keys} NONE')
                    continue

                print(f'\n====== {keys} range={rvs[0][0]}-{rvs[-1][0]}'
                      + (' complexity: ' if complexity else '') + complexity)
                for rv in rvs:
                    if keys:
                        self.store_top(bests, rv)
                        if not self.opts.verbose:
                            continue
                    _, scores, words, keys_str = rv
                    uniq = set(list(''.join(words.split()))) # uniq letters
                    every = set(list('abcdefghijklmnopqrstuvwxyz')) # all letters
                    left = '/' + ''.join(sorted(list(every - uniq)))
                    trap_scores = [scorer._get_trap_score(w, left) for w in words.split()]
                    trap_score = max(trap_scores)
                    print(rv[0],
                        str(scores[0:NWORDS]) if self.opts.verbose else '',
                        scores[NWORDS:], words, left, keys_str, trap_score, trap_scores)

obj = BestWords()
obj.main()
